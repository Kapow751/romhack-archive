plugins {
    id 'java'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.commons:commons-csv:1.10.0', 'javax.json:javax.json-api:1.1'
    runtimeOnly 'org.glassfish:javax.json:1.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

jar {
    archiveBaseName = 'tools-library' // Default jar, no manifest, just to reuse the tools in other projects
    archiveVersion = '0.0.9'
}

tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

def jarPackage(artifactName, className) {
    return tasks.create("jar-${artifactName}", Jar) {
        archiveBaseName = artifactName
        archiveVersion = jar.archiveVersion
        from(project.sourceSets.main.output) {
            include "**/**"
        }

        from {
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }

        manifest {
            attributes "Implementation-Title": className,
                    "Main-Class": className
        }
    }
}

// Executable artifacts, all of them can be obtained together using the assemble task
artifacts {
    archives jarPackage("dat-creator", "com.github.videogamearchive.dat.DatCreator"),
            jarPackage("romset-creator", "com.github.videogamearchive.romset.RomsetCreator"),
            jarPackage("rom-patcher", "com.github.videogamearchive.rompatcher.RomPatcher"),
            jarPackage("migration-assistant", "com.github.videogamearchive.migration.MigrationAssistant"),
            jarPackage("romhack2archive", "com.github.videogamearchive.hack2arch.Romhack2Archive")
}